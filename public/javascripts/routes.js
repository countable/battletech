<<<<<<< HEAD
// Generated by CoffeeScript 1.9.2
=======
// Generated by CoffeeScript 1.6.3
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
(function() {
  var drawWeapons, getMechClass;

  drawWeapons = function() {
    return WEAPONS.forEach(function(weapon) {
<<<<<<< HEAD
      return $('.weapons .' + weapon.type).append(jade.templates.weapon(weapon));
=======
      return $('.weapons .' + weapon.type).append(Templates.weapon(weapon));
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
    });
  };

  window.drawMech = function() {
<<<<<<< HEAD
    var context, critdata, i, j, len, part, part_info, partname, ref, results;
    $('.parts').empty().show();
    if (active_mech.destroyed) {
      $('.parts').addClass('dead');
    }
=======
    var bodyparts, context, part, part_info, partname, slot, slots, tokens, _i, _len, _ref, _results;
    $('.parts').empty().show();
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
    for (part in PARTS) {
      part_info = PARTS[part];
      context = {
        name: part,
        armor: active_mech['ARMOR_' + part],
        structure: active_mech['STRUCTURE_' + part],
        armor_remaining: active_mech['armor_' + part],
        structure_remaining: active_mech['structure_' + part]
      };
<<<<<<< HEAD
      $('.parts').append(jade.templates.part(context));
    }
    results = [];
    for (partname in PARTS) {
      part = PARTS[partname];
      if (partname.indexOf("REAR") === -1) {
        critdata = "";
        ref = [1, 2, 3, 4, 5, 6];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          critdata += i + '. ' + (active_mech['CRIT_' + partname + '_' + i] || '-') + "<br>";
          if (active_mech['destroyed_' + partname + "_" + i]) {
            critdata += "<b class='destroyed'>&times;</b>";
          }
        }
        results.push($('.parts').append("<div class='crit CRIT_" + partname + "'>\n  <h5>" + partname + "</h5>\n  <p>" + critdata + "</p>\n</div>"));
      } else {
        results.push(void 0);
      }
    }
    return results;
=======
      $('.parts').append(Templates.part(context));
    }
    $('.crits').empty().show();
    bodyparts = {};
    _ref = active_mech.getCriticalSlots();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slot = _ref[_i];
      tokens = slot.slot.split('_');
      partname = tokens.slice(1, +(tokens.length - 2) + 1 || 9e9).join(' ');
      if (bodyparts[partname] == null) {
        bodyparts[partname] = [];
      }
      bodyparts[partname].push({
        item: slot.item,
        position: tokens[tokens.length - 1] * 1
      });
    }
    _results = [];
    for (partname in bodyparts) {
      slots = bodyparts[partname];
      slots = slots.sort(function(a, b) {
        return a.position - b.position;
      });
      console.log(slots);
      $('.crits').append("<h3>" + partname + "</h3>");
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = slots.length; _j < _len1; _j++) {
          slot = slots[_j];
          _results1.push($('.crits').append("<div>" + slot.position + ". " + slot.item + "</div>"));
        }
        return _results1;
      })());
    }
    return _results;
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
  };

  bone.set('log', false);

<<<<<<< HEAD
  bone.set('templates', jade.templates);
=======
  bone.set('templates', Templates);
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1

  drawWeapons();

  window.active_player = null;

  window.active_mech = null;

  window.router = bone.router({
    routes: {
      '': 'root',
      ':player': 'player',
      ':player/:mech': 'mech'
    },
    root: function() {
      window.active_player = null;
<<<<<<< HEAD
      bone.mount('.players', 'players', {
        data: players,
        refresh: true
      });
      return $('.weapons').hide();
=======
      return bone.mount('.players', 'players', {
        data: players,
        refresh: true
      });
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
    },
    player: function(player_name) {
      window.active_player = _.findWhere(players, {
        name: player_name
      });
      bone.mount('.players', 'players', {
<<<<<<< HEAD
        data: active_player.name,
        refresh: true
      });
      bone.mount('.mechs', 'mechs', {
        data: active_player.mechs,
        refresh: true
      });
      $('.weapons').hide();
=======
        data: active_player.name
      });
      bone.mount('.mechs', 'mechs', {
        data: active_player.mechs
      });
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
      return $('.parts').hide();
    },
    mech: function(player_name, mech_name) {
      var MechClass;
<<<<<<< HEAD
      window.active_player = _.findWhere(players, {
        name: player_name
      });
      bone.mount('.players', 'players', {
        data: active_player.name,
        refresh: true
      });
      window.active_mech = _.findWhere(active_player.mechs, {
        name: mech_name
      });
      bone.mount('.mechs', 'mechs', {
        data: active_player.mechs,
        refresh: true
      });
      MechClass = getMechClass(window.active_mech.type);
      window.active_mech = new MechClass(active_mech);
      $('.weapons').show();
=======
      this.player(player_name);
      window.active_mech = _.findWhere(active_player.mechs, {
        name: mech_name
      });
      MechClass = getMechClass(window.active_mech.type);
      window.active_mech = new MechClass(active_mech);
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
      return drawMech();
    }
  });

  getMechClass = function(type) {
    return _.find(MECHS, function(MECH) {
      return MECH.prototype.NAME === type;
    });
  };

  bone.router.start();

}).call(this);
<<<<<<< HEAD

//# sourceMappingURL=routes.js.map
=======
>>>>>>> 438da4c963442fd141e19f9918d3e8a1d57c71f1
