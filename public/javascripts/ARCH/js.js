// Generated by CoffeeScript 1.6.3
(function() {
  var Type;

  $.fn.serializeObject = function() {
    var a, o;
    o = {};
    a = this.serializeArray();
    $.each(a, function() {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }
        return o[this.name].push(this.value || "");
      } else {
        return o[this.name] = this.value || "";
      }
    });
    return o;
  };

  Type = (function() {
    function Type() {}

    Type.define = function() {
      var that;
      console.log(this.name);
      TYPES[this.name] = this;
      this.$ = $('.' + this.name);
      this.load();
      that = this;
      console.log('.' + this.name + ' .remove');
      return $('body').on('click', '.' + this.name + ' .remove', function() {
        return that.remove($(this).parents('.each').last().data('item'));
      });
    };

    Type.has = function(what) {
      if (this.fkeys == null) {
        this.fkeys = {};
      }
      return this.fkeys[what] = function() {
        return TYPES[what];
      };
    };

    Type.remove = function(which) {
      var i, item, _i, _len, _ref;
      _ref = this.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item === which) {
          this.items.splice(i, 1);
        }
      }
      return this.save();
    };

    Type.add = function(which) {
      this.items.push(which);
      return this.save();
    };

    Type.load = function() {
      return this.items = JSON.parse(localStorage.getItem(this.name)) || [];
    };

    Type.save = function() {
      localStorage.setItem(this.name, JSON.stringify(this.items));
      return this.render();
    };

    Type.render = function($node) {
      var that;
      that = this;
      $('.' + this.name + '.each.drawn').remove();
      return $('.' + this.name + '.each').each(function() {
        var $new, item, k, v, _i, _len, _ref, _results;
        _ref = that.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if ($(this).hasClass('multiplex') && item !== that.active_item) {
            continue;
          }
          $new = $(this).clone().addClass('drawn');
          $new.data('item', item);
          for (k in item) {
            v = item[k];
            $node = $new.find('.' + k);
            if (typeof v === 'string' || typeof v === 'number') {
              $node.text(v);
            } else if ($node.hasClass('each')) {
              if (v instanceof Array) {
                console.log(TYPES.slice(k), k);
                TYPES[k.slice(0)].render($node);
              }
            }
          }
          _results.push($new.show().insertAfter(this));
        }
        return _results;
      });
    };

    Type.findOne = function(attr, val) {
      var item, _i, _len, _ref;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item[attr] === val) {
          return item;
        }
      }
    };

    return Type;

  })();

  $.fn.render = function() {};

  window.TYPES = {};

  window.Type = Type;

  $('form.edit').on('submit', function(e) {
    var $form, classes, klass, _i, _len, _ref;
    e.preventDefault();
    $form = $(this);
    classes = $form.get(0).className.split(' ');
    for (_i = 0, _len = classes.length; _i < _len; _i++) {
      klass = classes[_i];
      if ($form.hasClass('inline')) {
        if ((_ref = TYPES[klass]) != null) {
          _ref.add($form.serializeObject());
        }
      }
    }
    return false;
  });

}).call(this);
