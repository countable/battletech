// Generated by CoffeeScript 1.9.2

/*
view = ->
  name = arguments[1].name

  arguments[1].render = ->
    context = {}
    context[@name] = @
    @$el.html Templates[@name] context
  
  bone.view[name] = bone.view.apply bone, arguments
 */

(function() {
  var Player, goto, view;

  view = function(root, opts) {
    var ev_spec, ev_type, handler, ref, results, selector;
    ref = opts.events;
    results = [];
    for (ev_spec in ref) {
      handler = ref[ev_spec];
      ev_spec = ev_spec.split(' ');
      ev_type = ev_spec[0];
      selector = ev_spec.slice(1).join(' ');
      console.log(ev_type, root + ' ' + selector);
      results.push($().on(ev_type, root + ' ' + selector, opts[handler]));
    }
    return results;
  };

  $.fn.item = function() {
    var item, node;
    node = this;
    while (node) {
      item = node.data('item');
      if (item != null) {
        return item;
      }
      node = this.parent();
    }
  };

  $.fn.vals = function() {
    var data;
    data = {};
    this.find('[name]').each(function(item) {
      return data[item.name] = $(item).val();
    });
    return data;
  };

  goto = function(location) {
    return bone.router.navigate(location, {
      trigger: true
    });
  };

  Player = bone.view('.players', {
    events: {
      'click .new button': 'new',
      'click li .name': 'pick',
      'click .remove': 'remove'
    },
    save: function() {
      return localStorage.setItem('players', JSON.stringify(players));
    },
    "new": function() {
      var name;
      name = $('.players .new [name="name"]').val();
      players.push({
        mechs: [],
        name: name
      });
      this.save();
      return goto(name);
    },
    pick: function(e) {
      var player;
      player = _.findWhere(players, {
        name: $(e.target).text()
      });
      return goto(player.name);
    },
    remove: function(e) {
      var name;
      name = $(e.target).parent().find('.name').text();
      window.players = _.filter(players, function(player) {
        return player.name !== name;
      });
      this.save();
      return goto('');
    }
  });

  bone.view('.mechs', {
    events: {
      'click li .name': 'pick',
      'click .new button': 'new',
      'click .remove': 'remove'
    },
    "new": function() {
      active_player.mechs.push({
        name: $('.mechs .new [name="name"]').val(),
        type: $('.mechs .new select').val()
      });
      localStorage.setItem('players', JSON.stringify(players));
      return bone.mount('.mechs', 'mechs', {
        data: {
          mechs: active_player.mechs
        }
      });
    },
    pick: function(e) {
      var mech;
      mech = _.findWhere(active_player.mechs, {
        name: $(e.target).text()
      });
      return window.location.hash = active_player.name + '/' + mech.name;
    },
    remove: function(e) {
      var name;
      name = $(e.target).parent().find('.name').text();
      window.active_player.mechs = _.filter(window.active_player.mechs, function(mech) {
        return mech.name !== name;
      });
      Player.save();
      return bone.mount('.mechs', 'mechs', {
        data: active_player.mechs
      });
    }
  });

  bone.view('.weapons', {
    events: {
      'click .side': 'side',
      'click .sub': 'add',
      'click .add': 'add',
      'click .fire': 'fire'
    },
    side: function(e) {
      $('.sides .side').removeClass('active');
      return $(e.target).addClass('active');
    },
    add: function(e) {
      var $count, delta;
      if ($(e.target).text() === '-') {
        delta = -1;
      } else {
        delta = 1;
      }
      $count = $(e.target).parents('.weapon').find('.count');
      return $count.text(Math.max(0, delta + parseInt($count.text())));
    },
    fire: function(e) {
      var $weapons;
      $weapons = $('.count').filter(function() {
        return parseInt($(this).text()) > 0;
      }).parent();
      $weapons.each(function(weapon) {
        var count, results, weapon_name;
        count = parseInt($(this).find('.count').text());
        results = [];
        while (count) {
          weapon_name = $(this).find('.name').text();
          weapon = _.findWhere(WEAPONS, {
            name: weapon_name
          });
          hit_with_weapon(weapon);
          results.push(count -= 1);
        }
        return results;
      });
      $('.count').text(0);
      return drawMech();
    }
  });

  bone.view('.part', {
    events: {
      'click .repair-manual': 'repair',
      'click .damage-manual': 'damage'
    },
    repair: function() {
      return console.log('repair manual');
    }
  });

}).call(this);
