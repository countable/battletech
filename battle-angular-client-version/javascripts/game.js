// Generated by CoffeeScript 1.6.3
(function() {
  var add_critical_message, critical_hit, critical_message, d12, d6, damage_animation, damage_to, destroy, _da_phase;

  d6 = function() {
    return Math.floor(Math.random() * 6 + 1);
  };

  d12 = function() {
    return Math.floor(Math.random() * 12 + 1);
  };

  window.players = (JSON.parse(localStorage.getItem('players'))) || [];

  add_critical_message = function() {
    if (critical_message) {
      critical_message += "<br>";
    }
    return critical_message += 'critical!';
  };

  critical_hit = function(part) {
    var candidates, hit, i, slot;
    add_critical_message('critical!');
    candidates = [];
    i = 1;
    while (i <= 12) {
      slot = mech['CRIT_' + part + '_' + i];
      if (slot && !mech['destroyed_' + part + '_' + i]) {
        candidates.append({
          row: i,
          slot: slot
        });
      }
      i += 1;
    }
    if (candidates.length) {
      hit = candidates[Math.floor(Math.random() * candidates.length)];
      add_critical_message('hit ' + part + ' : ' + hit.slot);
      return active_mech['destroyed_' + part + '_' + hit.i] = true;
    }
  };

  destroy = function() {
    active_mech.destroyed = true;
    return alert("DESTROYED!!!");
  };

  _da_phase = {};

  damage_animation = function($part, damage, critical) {
    var $damage, loc, part;
    if (critical == null) {
      critical = '';
    }
    loc = $part.offset();
    $('body').append($damage = $("<div class='damage-alert'><div class='num'>" + damage + "</div><div class='crit'>" + critical + "</div></div!>"));
    part = $part.get(0).className;
    if (_da_phase[part] == null) {
      _da_phase[part] = 0;
    }
    _da_phase[part] += 2;
    $damage.css({
      left: loc.left + Math.sin(_da_phase[part]) * 15,
      top: loc.top + Math.cos(_da_phase[part]) * 15
    });
    return setTimeout(function() {
      return $damage.remove();
    }, 3000);
  };

  critical_message = '';

  damage_to = function(part, damage, force_critical) {
    var $part, armor, flows_to, orig_structure, roll, structure;
    if (force_critical == null) {
      force_critical = false;
    }
    console.log(part, 'hit with', damage, 'damage!');
    $part = $('.' + part);
    critical_message = '';
    armor = active_mech['armor_' + part];
    orig_structure = structure = active_mech['structure_' + part];
    if (force_critical) {
      critical_hit(part);
    }
    armor -= damage;
    if (armor < 0) {
      part = part.replace('_REAR', '');
      $part = $('.' + part);
      structure = active_mech['structure_' + part];
      if (structure) {
        roll = d6() + d6();
        console.log('critical roll', roll);
        if (roll >= 8 && roll <= 9) {
          critical_hit(part);
        }
        if (roll >= 10 && roll <= 11) {
          critical_hit(part);
          critical_hit(part);
        }
        if (roll === 12) {
          if (part === "HEAD") {
            return destroy();
          } else if (part.indexOf("ARM") > -1 || part.indexOf('LEG') > -1) {
            add_critical_message(part + ' blown off!');
            structure = 0;
          } else {
            critical_hit(part);
            critical_hit(part);
            critical_hit(part);
          }
        }
      }
      structure += armor;
      armor = 0;
      if (structure < 1) {
        flows_to = PARTS[part].flows_to;
        if (flows_to === "DEATH") {
          destroy();
        } else {
          if (structure < 0) {
            if (orig_structure > 0) {
              console.log(part, 'blown off!');
            }
            damage_to(flows_to, -structure);
          }
          structure = 0;
        }
      }
    }
    damage_animation($part, damage, critical_message);
    active_mech['structure_' + part] = structure;
    return active_mech['armor_' + part] = armor;
  };

  window.hit_with_weapon = function(weapon) {
    var apply_damage, idx, m, missile_type, qty, roll, side, _results, _results1;
    console.log("HIT WITH", weapon.name);
    side = $.trim($('.sides .active').text());
    console.log("SIDE", side);
    apply_damage = function(dmg) {
      var location, roll;
      if (weapon.name === 'Punch' || weapon.name === "Hatchet") {
        roll = d6();
        location = PUNCH_HIT_LOCATION[side][roll + ''];
      } else if (weapon.name === 'Kick') {
        roll = d6();
        location = KICK_HIT_LOCATION[side][roll + ''];
      } else {
        roll = d6() + d6();
        location = RANGED_HIT_LOCATION[side][roll + ''];
      }
      return damage_to(location, dmg, roll === 2);
    };
    m = weapon.name.match(/(\S+)\s(\d+)/);
    if (m) {
      qty = m[2];
      missile_type = m[1];
      roll = d6() + d6();
      qty = MISSILE_HITS_TABLE[roll][MISSILE_HITS_COLUMNS[qty]];
    } else {
      qty = 1;
      missile_type = null;
    }
    if (missile_type === 'SRM') {
      idx = qty;
      _results = [];
      while (idx) {
        apply_damage(2);
        _results.push(idx -= 1);
      }
      return _results;
    } else if (missile_type === 'LRM') {
      idx = qty;
      _results1 = [];
      while (idx > 0) {
        apply_damage(Math.min(5, idx));
        _results1.push(idx -= 5);
      }
      return _results1;
    } else {
      return apply_damage(weapon.damage);
    }
  };

}).call(this);
